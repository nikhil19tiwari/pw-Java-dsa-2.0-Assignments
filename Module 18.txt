Exception Handling 
Assignment Solutions 
Assignment Questions 
Explain different types of Errors in Java.  Ans: In any programming language we categorise errors into 2 type 
Syntax Error/CompileTime Mistake 
Logical Error/RunTimeMistakes   
Syntax error/CompileTime Mistake 
It refers to the mistakes done by the programmer with respect to syntax 
These mistakes are identified by the compiler, so we say it as“CompileTimeMistake”.   
Logical Error/RunTimeMistake 
It refers to the mistakes done by the programmer in terms of writing a logi 
These mistakes are identified by jvm during the execution of a program, so we say it as “RunTimeMistake”.   
2. What is an Exception in Java .  Ans: An unwanted/expected event that disturbs the normal flow of execution of a program is called "Exception handling" 
The main objective of Exception handling is to handle the exception 
It is available for graceful termination of program.   
3. How can you handle exceptions in Java?Explain with an example .  Ans: Exception handling can be performed using:  Try: the set of statements or code which requires monitoring for an exception is kept under this block.  Catch: this block catches all exceptions that were trapped in the try block.  Finally: this block is always performed irrespective of the catching of exceptions in the try or catch block.   

Ex: 
class Launch   
{  public static void main(String args[])   

{  try   {  System.out.print("Hello" + " " + 1 / 0);  
}  catch(ArithmeticException e)   {  System.out.print("World");    }  }  }   
4. Why do we need exception handling in Java?  Ans: If there is no try and catch block while an exception occurs, the program will terminate. Exception handling ensures the smooth running of a program without program termination.   
5. What is the difference between exception and error in Java?  Ans: Errors typically happen while an application is running. For instance, Out of Memory Error occurs in case the JVM runs out of memory. On the other hand, exceptions are mainly caused by the application. For instance, Null Pointer Exception happens when an app tries to get through a null object.   
Cracking the Coding Interview in JAVA - Foundation 
Assignment Questions 
6. Name the different types of exceptions in Java.  Ans: Based on handling by JVM, there are typically two types of exceptions in Java:  Checked: Occur during the compilation. Here, the compiler checks whether the exception is handled and throws an error accordingly.  Unchecked: Occur during program execution. These are not detectable during the compilation process.   
7. Can we just use try instead of finally and catch blocks? Give an example .  Ans: No, doing so will show a compilation error. Catch or finally block must always accompany try block. We can remove either finally block or catch block, but never both.  
+++++++++++++++++++++++++++++++++++++++++++++++++++++++
1. What is the lambda expression of Java 8?
Ans: As its name suggests it's an expression which allows you to write more succinct code in Java 8. For
example (a, b) -> a + b is a lambda expression (look for that arrow ->).
Which is equal to following code:
public int value(int a, int b){
return a + b;
}
It's also called an anonymous function because you are essentially writing the code you write in function but
without name.
2. Can you pass lambda expressions to a method? When?
Ans: Yes, you can pass a lambda expression to a method provided it is expecting a functional interface. For
example, if a method is accepting a Runnable, Comparable or Comparator then you can pass a lambda
expression to it because all these are functional interfaces in Java 8.
3. What is the functional interface in Java 8?
Ans: A functional interface in Java 8 is an interface with a single abstract method. For example, Comparator
which has just one abstract method called compare() or Runnable which has just one abstract method called
run(). There are many more general purpose functional interfaces introduced in JDK on java.util.function
package. They are also annotated with @FunctionalInterface but that's optional.
4. What is the benefit of lambda expressions in Java 8?
Ans: The main benefit of lambda expression in Java 8 is that now it's easier to pass a code block to a method.
Earlier, the only way to do this was wrapping the code inside an Anonymous class, which requires a lot of
boilerplate code.
5. Is it mandatory for a lambda expression to have parameters?
Ans: No, it's not mandatory for a lambda expression to have parameters, you can define a lambda expression
without parameters as shown below:
() -> System.out.println("lambdas without parameter");
You can pass this code to any method which accepts a functional interface.
++++++++++++++++++++++++++++++++++++++++++++++++
1. What is an interface in Java?
Ans: An interface in Java is a mechanism that is used to achieve complete abstraction. It is basically a kind of
class that contains only constants and abstract methods.
2. Which modifiers are allowed for methods in an Interface?Explain with an example
Ans: Only abstract and public modifiers are allowed for methods in interfaces.
3. What is the use of interface in Java?
Ans: There are many reasons to use interfaces in java. They are as follows:
a. An interface is used to achieve full abstraction.
b. Using interfaces is the best way to expose our project’s API to some other project.
c. Programmers use interfaces to customise features of software differently for different objects.
d. By using interface, we can achieve the functionality of multiple inheritance.